import{_ as a,c as r,o as i,a4 as n}from"./chunks/framework.hPoXimdX.js";const m=JSON.parse('{"title":"1. Introducció","description":"","frontmatter":{},"headers":[],"relativePath":"1-introduccio.md","filePath":"1-introduccio.md"}'),s={name:"1-introduccio.md"};function t(o,e,c,l,d,p){return i(),r("div",null,e[0]||(e[0]=[n('<h1 id="_1-introduccio" tabindex="-1">1. Introducció <a class="header-anchor" href="#_1-introduccio" aria-label="Permalink to &quot;1. Introducció&quot;">​</a></h1><p>La millor manera de crear i mantindre un programa gran és construir-lo a partir de peces més xicotetes o mòduls, cadascun dels quals és més manejable que el programa complet.</p><p>Les <strong>funcions</strong> (també anomenades subprogrames o procediments, segons el llenguatge) permeten evitar la repetició de codi, ja que es poden invocar des de diversos punts del programa amb una sola crida.</p><p>El concepte de funció consisteix a encapsular un conjunt d&#39;instruccions dins d&#39;una declaració específica. Açò permet dividir el problema en tasques més menudes i clarament diferenciades, facilitant la descomposició funcional i l&#39;organització del programa.</p><p><strong>Utilitats principals de les funcions</strong>:</p><ul><li>Agrupar codi que representa una idea o acció concreta.</li><li>Evitar repetir codi que s&#39;ha de reutilitzar diverses vegades.</li><li>Dividir un programa gran en parts més simples i especialitzades.</li></ul><p><strong>Característiques habituals de les funcions</strong>:</p><ul><li>Tenen un nom únic que les identifica.</li><li>Es poden cridar des de qualsevol punt del programa (si el context ho permet).</li><li>Poden rebre valors d&#39;entrada (paràmetres) per a processar-los.</li><li>Poden retornar un resultat com a resposta.</li></ul>',8)]))}const _=a(s,[["render",t]]);export{m as __pageData,_ as default};
