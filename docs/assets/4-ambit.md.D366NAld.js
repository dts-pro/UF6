import{_ as i,c as r,o as l,j as e,a}from"./chunks/framework.hPoXimdX.js";const b=JSON.parse('{"title":"4. Àmbit de les variables","description":"","frontmatter":{},"headers":[],"relativePath":"4-ambit.md","filePath":"4-ambit.md"}'),t={name:"4-ambit.md"};function n(c,s,o,d,m,u){return l(),r("div",null,s[0]||(s[0]=[e("h1",{id:"_4-ambit-de-les-variables",tabindex:"-1"},[a("4. Àmbit de les variables "),e("a",{class:"header-anchor",href:"#_4-ambit-de-les-variables","aria-label":'Permalink to "4. Àmbit de les variables"'},"​")],-1),e("p",null,[a("Una funció només pot fer ús de les seues "),e("strong",null,"variables locals"),a(", és a dir, aquelles que es declaren dins de la pròpia funció: tant els paràmetres com les variables creades al seu interior. Aquestes variables s'inicialitzen cada vegada que s'executa la funció, i deixen d'existir quan finalitza.")],-1),e("p",null,"Per tot això, una funció no pot accedir directament a variables declarades fora d'ella, i a l'inrevés: el codi extern a la funció tampoc pot accedir a les seues variables locals. Aquesta propietat s'anomena encapsulació, i és fonamental per a mantenir el codi ben organitzat, modular i més fàcil de mantindre en programes grans i complexos.",-1),e("p",null,"Encara que tècnicament alguns llenguatges de programació permeten accedir a variables externes mitjançant mecanismes específics (com ara variables globals, clausures o membres d'una classe), no és una pràctica recomanada en general, especialment si es busca escriure codi robust, reutilitzable i fàcil de depurar.",-1)]))}const f=i(t,[["render",n]]);export{b as __pageData,f as default};
