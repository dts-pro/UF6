import{_ as a,c as r,o as i,a4 as s}from"./chunks/framework.hPoXimdX.js";const p=JSON.parse('{"title":"Exercicis","description":"","frontmatter":{},"headers":[],"relativePath":"9-exercicis.md","filePath":"9-exercicis.md"}'),t={name:"9-exercicis.md"};function n(c,e,o,l,u,d){return i(),r("div",null,e[0]||(e[0]=[s('<h1 id="exercicis" tabindex="-1">Exercicis <a class="header-anchor" href="#exercicis" aria-label="Permalink to &quot;Exercicis&quot;">​</a></h1><h2 id="exercicis-nivell-basic" tabindex="-1">Exercicis - Nivell bàsic <a class="header-anchor" href="#exercicis-nivell-basic" aria-label="Permalink to &quot;Exercicis - Nivell bàsic&quot;">​</a></h2><h3 id="exercici-1" tabindex="-1">Exercici 1 <a class="header-anchor" href="#exercici-1" aria-label="Permalink to &quot;Exercici 1&quot;">​</a></h3><p>a) Escriu una funció que retorne la suma dels valors d&#39;un vector d&#39;enters.<br> b) Escriu una funció que retorne la mitjana dels valors d&#39;un vector d&#39;enters.<br> c) Escriu una funció que retorne el valor màxim d&#39;un vector d&#39;enters.<br> d) Escriu un programa que cree un vector amb N valors enters (generats de forma aleatòria) i mostre la suma, la mitjana i el màxim.</p><h3 id="exercici-2" tabindex="-1">Exercici 2 <a class="header-anchor" href="#exercici-2" aria-label="Permalink to &quot;Exercici 2&quot;">​</a></h3><p>a) Escriu una funció que retorne quantes vocals conté una cadena de text.<br> b) Escriu una funció que retorne quants espais conté una cadena de text.<br> c) Escriu una funció que retorne quantes consonants conté una cadena de text.<br> d) Escriu un programa que llig una frase per teclat i mostre el nombre de vocals, el nombre d&#39;espais i el nombre consonants.</p><h3 id="exercici-3" tabindex="-1">Exercici 3 <a class="header-anchor" href="#exercici-3" aria-label="Permalink to &quot;Exercici 3&quot;">​</a></h3><p>a) Escriu una funció que rebrà una cadena i retornarà la contrària (inversa).<br> b) Escriu una funció que rebrà dos cadenes i retornarà <code>true</code> o <code>false</code> en funció de si són iguals o no.<br> c) Escriu un programa que demana per teclat una paraula i mostre si és palíndrom usant les funcions anteriors.</p><h2 id="exercicis-nivell-mitja" tabindex="-1">Exercicis - Nivell mitjà <a class="header-anchor" href="#exercicis-nivell-mitja" aria-label="Permalink to &quot;Exercicis - Nivell mitjà&quot;">​</a></h2><h3 id="exercici-4" tabindex="-1">Exercici 4 <a class="header-anchor" href="#exercici-4" aria-label="Permalink to &quot;Exercici 4&quot;">​</a></h3><p>a) Escriu una funció que mostre un menú amb les opcions: sumar, restar, multiplicar, dividir i acabar el programa.<br> b) Escriu una funció que retorne la suma de dos nombres rebuts per paràmetres.<br> c) Escriu una funció que retorne la resta de dos nombres rebuts per paràmetres.<br> d) Escriu una funció que retorne la multiplicació de dos nombres rebuts per paràmetres.<br> e) Escriu una funció que retorne la divisió de dos nombres rebuts per paràmetres (tenint en compte la divisió per zero).<br> f) Escriu un programa que demane dos nombres, mostre el menú i permeta triar una opció. Ho farà fins que l&#39;usuari seleccione l&#39;opció d&#39;eixir del programa.</p><h3 id="exercici-5" tabindex="-1">Exercici 5 <a class="header-anchor" href="#exercici-5" aria-label="Permalink to &quot;Exercici 5&quot;">​</a></h3><p>Dissenya un sistema que permeta afegir un estudiant, marcar la seva assistència i mostrar l&#39;estat d&#39;assistència de tots els estudiants. Quan l&#39;usuari vulga afegir un estudiant, el programa demanarà el nom i l&#39;incorporarà a la llista de persones matriculades només si no hi és ja, assignant-li automàticament l&#39;estat de no assistit; si el nom ja existeix, no fa cap canvi. Quan l&#39;usuari tria marcar assistència, el sistema demana el nom de l&#39;estudiant i, si el troba a la llista, canvia el seu estat al de assistit, i si no existeix, informa que no es pot marcar l&#39;assistència d&#39;un estudiant desconegut. Quan l&#39;usuari demana veure els assistents, el programa mostrarà tots els noms i si han assistit o no. Finalment, l&#39;usuari podrà finalitzar quan vulga l&#39;execució del programa.</p><h3 id="exercici-6" tabindex="-1">Exercici 6 <a class="header-anchor" href="#exercici-6" aria-label="Permalink to &quot;Exercici 6&quot;">​</a></h3><p>Un sistema de gestió acadèmica permet registrar alumnes amb el seu nom i les notes de les cinc assignatures. A partir d&#39;aquest registre, qualsevol vegada que l&#39;usuari ho sol·licite, el programa mostrarà el llistat d&#39;alumnes amb mitjana de notes superior a 9. També ofereix la possibilitat de determinar quin alumne presenta la variabilitat de notes més gran, és a dir, amb major diferència entre la seva nota més alta i la més baixa.</p><h2 id="exercicis-recursivitat" tabindex="-1">Exercicis - Recursivitat <a class="header-anchor" href="#exercicis-recursivitat" aria-label="Permalink to &quot;Exercicis - Recursivitat&quot;">​</a></h2><h3 id="exercici-r1" tabindex="-1">Exercici R1 <a class="header-anchor" href="#exercici-r1" aria-label="Permalink to &quot;Exercici R1&quot;">​</a></h3><p>Estàs desenvolupant un gestor de salut per a mascotes. Cada animal té una fitxa on s&#39;indica, any rere any, les revisions mèdiques anuals. Cada fitxa, per tant, es composa de dos valors: l&#39;edat de l&#39;animal (anirà des de 0 fins a l&#39;actual) i un enter que indica la quantitat de revisions que es va fer amb eixa edat.</p><p>a) Implementa una funcionalitat que, a partir d&#39;una llista de revisions de l&#39;animal, permeta comptar quantes revisions se li han realitzat en total. Cal recórrer la llista de forma recursiva i retornar la suma dels valors.<br> b) Ara es vol saber si l&#39;animal va tindre alguna edat on va rebre més d&#39;una revisió. Implementa una funcionalitat que, a partir d&#39;eixa mateixa llista, recórrega recursivament les revisions i retorne un llistat amb totes les edats en què es feren més d&#39;una revisió.<br> c) Determina l&#39;edat en què l&#39;animal va tindre més revisions. En cas d&#39;empat, pots tornar la menor edat. El càlcul s&#39;ha de fer de forma recursiva, comparant les revisions entre posicions.<br> d) Comprova si existeix alguna edat en què no es va fer cap revisió. Has de retornar un booleà (<code>true</code> si n&#39;hi ha almenys una, <code>false</code> en cas contrari), fent el recorregut recursivament.<br> e) Genera una cadena de text que mostre totes les edats i el nombre de revisions fetes en cadascuna, separades per comes. El format seria per exemple: <code>&quot;Edat 0: 1 revisió, Edat 1: 0 revisions, Edat 2: 2 revisions&quot;</code>. El format ha de mantindre l&#39;ordre original i generar-se de forma recursiva.</p><h3 id="exercici-r2" tabindex="-1">Exercici R2 <a class="header-anchor" href="#exercici-r2" aria-label="Permalink to &quot;Exercici R2&quot;">​</a></h3><p>Estàs fent una aplicació per a comprovar si una contrasenya conté algun caràcter repetit. Les contrasenyes són cadenes de lletres i números (sense símbols ni espais).</p><p>a) Fes una funció que, a partir d&#39;una cadena de caràcters, torne una nova cadena on cada lletra només aparega una vegada (eliminant duplicats), mantenint l&#39;ordre original. Fes-ho de manera recursiva.<br> b) Fes una altra funció que, a partir d&#39;una contrasenya, retorne un llistat amb les lletres repetides.<br> c) Implementa una funció que comprove, de manera recursiva, si la contrasenya conté dos caràcters consecutius iguals. Per exemple, en &quot;aabb1c&quot; trobaria &quot;aa&quot; i retornaria <code>true</code>. Si no n&#39;hi ha cap repetició consecutiva, ha de retornar <code>false</code>.<br> d) Fes una funció recursiva que compte quants dígits conté la contrasenya. Per exemple, &quot;c0ntr4senya12&quot; conté 4 dígits (0, 4, 1, 2) i hauria de retornar 4.<br> e) Implementa una funció recursiva que torne una versió encriptada de la contrasenya invertint l&#39;ordre dels caràcters. És a dir, donada &quot;abc123&quot; retornaria &quot;321cba&quot;.</p><h3 id="exercici-r3" tabindex="-1">Exercici R3 <a class="header-anchor" href="#exercici-r3" aria-label="Permalink to &quot;Exercici R3&quot;">​</a></h3><p>Una empresa té una estructura organitzativa on cada empleat pot tindre subordinats, i estos subordinats poden tindre al seu torn més persones al seu càrrec.</p><p>Cal crear un sistema que permeta calcular quantes persones estan sota la supervisió directa i indirecta d&#39;un gerent específic. Per exemple, si Joan és gerent de Maria i Pere, i Maria supervisa Anna i Carles, aleshores Joan supervisa indirectament un total de 4 persones.</p><div class="tip custom-block"><p class="custom-block-title">NOTA</p><p>L&#39;estructura organitzativa dels empleats s&#39;emmagatzema en una estructura clau-valor, on loa clau és el nom d&#39;un empleat i el valor és el llistat d&#39;empleats al seu càrrec.</p></div><h3 id="exercici-r4" tabindex="-1">Exercici R4 <a class="header-anchor" href="#exercici-r4" aria-label="Permalink to &quot;Exercici R4&quot;">​</a></h3><p>Estàs desenvolupant un explorador de fitxers per a una aplicació d&#39;escriptori. Els usuaris poden navegar per carpetes que contenen fitxers i altres carpetes, les quals al seu torn poden contindre més fitxers i carpetes.</p><p>Implementa una funcionalitat que permeta buscar un fitxer específic pel nom en tot el sistema de carpetes. El programa ha de revisar la carpeta actual, després entrar en cada subcarpeta i buscar-hi, i així successivament fins a trobar el fitxer o determinar que no existeix.</p>',29)]))}const x=a(t,[["render",n]]);export{p as __pageData,x as default};
